GitHub

Git Clone
The git clone command allows you to copy a remote repository onto your local machine.
First, find the remote repository for the project you’re working on or interested in - this can also be your fork of a project. Next, copy the URL for it. For example, if you’ve forked the freeCodeCamp guides repository, the URL looks like https://github.com/YOUR-GITHUB-USERNAME/guides.git.
In the command line on your local machine, navigate to where you want to save the project in your working directory. Finally, run the git clone command:
git clone URL-OF-REPOSITORY
The default name of the new directory on your computer is the name of the repository, but you can change this by including the last (optional) parameter:
git clone URL-OF-REPOSITORY NAME-OF-DIRECTORY-ON-COMPUTER
Git gives the remote the alias “origin”. This is a useful way to refer to the remote when you want to push your changes to the remote server or pull changes from it. See Git push and Git pull for more details.
Git only pulls the remote’s main branch onto your computer. This branch is usually named “master” by convention but may be defined differently depending on the project.
Also, Git automatically sets up your local main branch to track the remote branch. When you run git status, you’ll see information about whether your local branch is up-to-date with the remote. Here’s an example output:
myCommandPrompt (master) >> git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working tree clean
myCommandPrompt (master) >>
If your local master branch has three commits that you haven’t pushed up to the remote server yet, the status would say “Your branch is ahead of ‘origin/master’ by 3 commits.”
Git Clone Mirror
If you want to host mirror of a repository you can use mirror parameter.
git clone URL-OF-REPOSITORY --mirror
After mirroring a repository, you can clone your local mirror from your server.
git clone NAME-OF-DIRECTORY-ON-COMPUTER


Adding an existing project to GitHub using the command line

* Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.
￼
*  
* Open Terminal.
* Change the current working directory to your local project.
* Initialize the local directory as a Git repository. $ git init 
* Add the files in your new local repository. This stages them for the first commit. $ git add .
* # Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'. 
* Commit the files that you've staged in your local repository. $ git commit -m "First commit"
* # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. 
* At the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.
￼
*  
* In Terminal, add the URL for the remote repository where your local repository will be pushed. $ git remote add origin remote repository URL
* # Sets the new remote
* $ git remote -v
* # Verifies the new remote URL 
* Push the changes in your local repository to GitHub. $ git push -u origin master
* # Pushes the changes in your local repository up to the remote repository you specifi 



To Commit code from CMD
# Once a repo is cloned, you'll be working inside of the default branch (the default is `master`)
git clone https://github.com/<git-user>/<repo-name> && cd <repo-name>
# make changes and stage your files (repeat the `git add` command for each file, or use `git add .` to stage all)
git add <filename>
Ex: git add src/test/java/com/inetBanking/pageObjects/Test.java

# now commit your code
git commit -m "added some changes to my repo!"
# push changes in `master` branch to github
git push origin master

Adding a file to a repository using the command line



Git Pull
git pull is a Git command used to update the local version of a repository from a remote.
It is one of the four commands that prompts network interaction by Git. By default, git pull does two things.
1. Updates the current local working branch (currently checked out branch)
2. Updates the remote tracking branches for all other branches.
git pull fetches (git fetch) the new commits and merges (git merge) these into your local branch.
 

# General format
git pull OPTIONS REPOSITORY REFSPEC

# Pull from specific branch
git pull REMOTE-NAME BRANCH-NAME

* OPTIONS are the command options, such as --quiet or --verbose. You can read more about the different options in the Git documentation
* REPOSITORY is the URL to your repo. Example: https://github.com/freeCodeCamp/freeCodeCamp.git
* REFSPEC specifies which refs to fetch and which local refs to update
* REMOTE-NAME is the name of your remote repository. For example: origin.
* BRANCH-NAME is the name of your branch. For example: develop.

Using git pull
Use git pull to update a local repository from the corresponding remote repository. Ex: While working locally on master, execute git pull to update the local copy of master and update the other remote tracking branches. (More information on remote tracking branches in the next section.)
But, there are a few things to keep in mind for that example to be true:
* The local repository has a linked remote repository
    * Check this by executing git remote -v
    * If there are multiple remotes, git pull might not be enough information. You might need to enter git pull origin or git pull upstream.
* The branch you are currently checked out to has a corresponding remote tracking branch
    * Check this by executing git status. If there is no remote tracking branch, Git doesn’t know where to pull information from.
    * 
git fetch plus git merge
git pull is a combination command, equal to git fetch + git merge.

Git Stash
Git has an area called the stash where you can temporarily store a snapshot of your changes without committing them to the repository. It’s separate from the working directory, the staging area, or the repository.
This functionality is useful when you’ve made changes to a branch that you aren’t ready to commit, but you need to switch to another branch.
Stash Changes
To save your changes in the stash, run the command:
git stash save "optional message for yourself"
This saves your changes and reverts the working directory to what it looked like for the latest commit. Stashed changes are available from any branch in that repository.
Note that changes you want to stash need to be on tracked files. If you created a new file and try to stash your changes, you may get the error No local changes to save.
View Stashed Changes
To see what is in your stash, run the command:
git stash list
This returns a list of your saved snapshots in the format stash@{0}: BRANCH-STASHED-CHANGES-ARE-FOR: MESSAGE. The stash@{0} part is the name of the stash, and the number in the curly braces ({ }) is the index of that stash. If you have multiple change sets stashed, each one will have a different index.
If you forgot what changes were made in the stash, you can see a summary of them with git stash show NAME-OF-STASH. If you want to see the typical diff-style patch layout (with the +‘s and -‘s for line-by-line changes), you can include the -p (for patch) option. Here’s an example:
git stash show -p stash@{0}

# Example result:
diff --git a/PathToFile/fileA b/PathToFile/fileA
index 2417dd9..b2c9092 100644
--- a/PathToFile/fileA
+++ b/PathToFile/fileA
@@ -1,4 +1,4 @@
-What this line looks like on branch
+What this line looks like with stashed changes
Retrieve Stashed Changes
To retrieve changes out of the stash and apply them to the current branch you’re on, you have two options:
1. git stash apply STASH-NAME applies the changes and leaves a copy in the stash
2. git stash pop STASH-NAME applies the changes and removes the files from the stash
There may be conflicts when you apply changes. You can resolve the conflicts similar to a merge (see Git merge for details).
Delete Stashed Changes
If you want to remove stashed changes without applying them, run the command:
git stash drop STASH-NAME
To clear the entire stash, run the command:
git stash clear

Git Merge
The git merge command will merge any changes that were made to the code base on a seperate branch to your current branch.
The command syntax is as follows:
git merge BRANCH-NAME
For example, if you are currently working in a branch named dev and would like to merge any new changes that were made in a branch named new-features, you would issue the following command:
git merge new-features
Please Note: If there are any uncommitted changes on your current branch, Git will not allow you to merge until all changes in your current branch have been committed. To handle those changes, you can either:
* Create a new branch and commit the changes git checkout -b new-branch-name
* git add .
* git commit -m "<your commit message>"  
* Stash them git stash               # add them to the stash
* git merge new-features  # do your merge
* git stash pop           # get the changes back into your working tree  
* Abandon it all git reset --hard        # removes all pending changes  
Merge Conflict
A merge conflict is when you make commits on separate branches that alter the same line in conflicting ways. Therefore Git will not know which version of the file to keep
resulting in the error message:
CONFLICT (content): Merge conflict in resumé.txt Automatic merge failed; fix conflicts and then commit the result.
In the code editor Git uses markings to indicate the HEAD (master) version of the file and the other version of the file.
<<<<<<< HEAD
>>>>>>> OTHER
From the code editor delete/update to resolve conflict and remove the special markings including the HEAD and OTHER file names, reload your file, then re add and recommit your changes.
For more information about the git merge command and all available options, please refer to the Git documentation.


Git Push
The git push command allows you to send (or push) the commits from your local branch in your local Git repository to the remote repository.
To be able to push to your remote repository, you must ensure that all your changes to the local repository are committed.
This command’s syntax is as follows:
git push <repo name> <branch name>
There are a number of different options you can pass with the command, you can learn more about them in the Git documentation or run git push --help.
Push to a Specific Remote Repository and Branch
In order to push code, you must first clone a repository to your local machine.
# Once a repo is cloned, you'll be working inside of the default branch (the default is `master`)
git clone https://github.com/<git-user>/<repo-name> && cd <repo-name>
# make changes and stage your files (repeat the `git add` command for each file, or use `git add .` to stage all)
git add <filename>
# now commit your code
git commit -m "added some changes to my repo!"
# push changes in `master` branch to github
git push origin master
To learn more about branches check out the links below:
* git checkout
* git branch
Push to a Specific Remote Repository and All Branches in it
If you want to push all your changes to the remote repository and all branches in it, you can use:
git push --all <REMOTE-NAME>
in which:
* --all is the flag that signals that you want to push all branches to the remote repository
* REMOTE-NAME is the name of the remote repository you want to push to
Push to a specific branch with force parameter
If you want to ignore the local changes made to Git repository at Github(Which most of developers do for a hot fix to development server) then you can use —force command to push by ignoring those changs.
git push --force <REMOTE-NAME> <BRANCH-NAME>
in which:
* REMOTE-NAME is the name of the remote repository to which you want to push the changes to
* BRANCH-NAME is the name of the remote branch you want to push your changes to
Push ignoring Git’s pre-push hook
By default git push will trigger the --verify toggle. This means that git will execute any client-side pre-push script that may have been configured. If the pre-push scripts fails, so will the git push. (Pre-Push hooks are good for doing things like, checking if commit messages confirm to company standards, run unit tests etc…). Occasionally you may wish to ignore this default behavior e.g. in the scenario where you wish to push your changes to a feature branch for another contributor to pull, but your work-in-progress changes are breaking unit tests. To ignore the hook, simply input your push command and add the flag --no-verify
git push --no-verify


Git Revert
The git revert command undoes a commit, but unlike git reset, which removes the commit from the commit history, it appends a new commit with the resulting content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration. When you are working on a repository with other developers, using git reset is highly dangerous because you alter the history of commits which makes it very difficult to maintain a consistent history of commits with other developers.

Example.
Let’s imagine the following situation. 1.) You are working on a file and you add and commit your changes. 2.) You then work on a few other things, and make some more commits. 3.) Now you realize, three or four commits ago, you did something that you would like to undo - how can you do this?
You might be thinking, just use git reset, but this will remove all of the commits after the one you would like to change - git revert to the rescue! Let’s walk through this example:

mkdir learn_revert # Create a folder called `learn_revert`
cd learn_revert # `cd` into the folder `learn_revert`
git init # Initialize a git repository

touch first.txt # Create a file called `first.txt`
echo Start >> first.txt # Add the text "Start" to `first.txt`

git add . # Add the `first.txt` file
git commit -m "adding first" # Commit with the message "Adding first.txt"

echo WRONG > wrong.txt # Add the text "WRONG" to `wrong.txt`
git add . # Add the `wrong.txt` file
git commit -m "adding WRONG to wrong.txt" # Commit with the message "Adding WRONG to wrong.txt"

echo More >> first.txt # Add the text "More" to `first.txt`
git add . # Add the `first.txt` file
git commit -m "adding More to first.txt" # Commit with the message "Adding More to first.txt"

echo Even More >> first.txt # Add the text "Even More" to `first.txt`
git add . # Add the `first.txt` file
git commit -m "adding Even More to First.txt" # Commit with the message "Adding More to first.txt"

# OH NO! We want to undo the commit with the text "WRONG" - let's revert! Since this commit was 2 from where we are not we can use git revert HEAD~2 (or we can use git log and find the SHA of that commit)

git revert HEAD~2 # this will put us in a text editor where we can modify the commit message.

ls # wrong.txt is not there any more!
git log --oneline # note that the commit history hasn't been altered, we've just added a new commit reflecting the removal of the `wrong.txt`


Git Log
The git log command displays all of the commits in a respository’s history.
By default, the command displays each commit’s:
* Secure Hash Algorithm (SHA)
* author
* date
* commit message
Navigating Git Log
Git uses the Less terminal pager to page through the commit history. You can navigate it with the following commands:
* to scroll down by one line, use j or ↓
* to scroll up by one line, use k or ↑
* to scroll down by one page, use the spacebar or the Page Down button
* to scroll up by one page, use b or the Page Up button
* to quit the log, use q
Git Log Flags
You can customize the information presented by git log using flags.
—oneline
git log --oneline
The --oneline flag causes git log to display
* one commit per line
* the first seven characters of the SHA
* the commit message
—stat
git log --stat
The --stat flag causes git log to display
* the files that were modified in each commit
* the number of lines added or removed
* a summary line with the total number of files and lines changed
—patch or -p
git log --patch
or, the shorter version
git log -p
The --patch flag causes git log to display
* the files that you modified
* the location of the lines that you added or removed
* the specific changes that you made
View specified number of commits by author
To view a specified number of commits by an author to the current repo (optionally in a prettified format), the following command can be used
git log --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" -n {NUMBER_OF_COMMITS} --author="{AUTHOR_NAME}" --all
Start at a specific commit
To start git log at a specific commit, add the SHA:
git log 7752b22
This will display the commit with the SHA 7752b22 and all of the commits made before that commit. You can combine this with any of the other flags.
—graph
git log --graph
The --graph flag enables you to view your git log as a graph. To make things things interesting, you can combine this command with --oneline option you learned from above.
git log --graph --oneline
The output would be similar to,
* 64e6db0 Update index.md
* b592012 Update Python articles (#5030)
* ecbf9d3 Add latest version and remove duplicate link (#8860)
* 7e3934b Add hint for Compose React Components (#8705)
* 99b7758 Added more frameworks (#8842)
* c4e6a84 Add hint for "Create a Component with Composition" (#8704)
*   907b004 Merge branch 'master' of github.com:freeCodeCamp/guide
|\  
| * 275b6d1 Update index.md
* |   cb74308 Merge branch 'dogb3rt-patch-3'
|\ \  
| |/  
|/|   
| *   98015b6 fix merge conflicts after folder renaming
| |\  
|/ /  
| * fa83460 Update index.md
* | 6afb3b5 rename illegally formatted folder name (#8762)
* | 64b1fe4 CSS3: border-radius property (#8803)


